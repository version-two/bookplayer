<?php

/**
 * This class represents and is able to read and manipulate a MPEG audio
 * @author         Soroush Falahati https://falahati.net
 * @copyright      Soroush Falahati (C) 2017
 * @license        LGPL v3 https://www.gnu.org/licenses/lgpl-3.0.en.html
 * @link           https://github.com/falahati/PHP-MP3
 * @formatter:off
*/
class MpegAudio{private $memory="";private $memoryPointer=0;private $memoryLength=0;private $resource=null;private $frames=-1;private $duration=0.0;private $frameOffsetTable=[];private $frameTimingTable=[];public static function fromFile($path){$inMemory=true;if($inMemory){return self::fromData(file_get_contents($path));}else{}}public static function fromData($data){if(!is_string($data)){return false;}$audio=new MpegAudio();$audio->memory=$data;$audio->memoryLength=strlen($audio->memory);return $audio;}private function read($length=0,$index=-1){if($this->resource===null){if($index<0){$index=$this->memoryPointer;}if($length==0){$length=$this->memoryLength-$index;}$this->memoryPointer=min($this->memoryLength,$index+$length);if($this->memoryPointer>=$this->memoryLength){return false;}return substr($this->memory,$index,$length);}else{}}private function write($data,$index=-1){if($this->resource===null){$length=strlen($data);$this->slice($length,$index);return $this->insert($data,$index);}else{}}private function insert($data,$index=-1){if($this->resource===null){if($index<0){$index=$this->memoryPointer;}$length=strlen($data);$this->memoryPointer=$index+$length;$this->memory=substr($this->memory,0,$index).$data.substr($this->memory,$index);$this->memoryLength+=strlen($data);return $length;}else{}}private function slice($length=0,$index=-1){if($this->resource===null){if($index<0){$index=$this->memoryPointer;}if($length==0){$length=$this->memoryLength-$index;}$this->memoryPointer=$index;$length=max(min($this->memoryLength-$index,$length),0);$this->memory=substr($this->memory,0,$index).substr($this->memory,$index+$length);$this->memoryLength-=$length;return $length;}else{}}private function seek($index=-1){if($index<0){if($this->resource===null){return $this->memoryPointer;}else{}}if($this->resource===null){$this->memoryPointer=$index;return true;}else{}}public function __construct(){$this->reset();$this->memory="";}private function reset(){$this->frames=-1;$this->frameTimingTable=[];$this->frameOffsetTable=[];$this->duration=0.0;}private function analyze(){$offset=$this->getStart();$this->frames=0;$this->frameOffsetTable=[];$this->frameTimingTable=[];$this->duration=0.0;if($offset!==false){while(true){$frameHeader=$this->readFrameHeader($offset);if($frameHeader===false){$offset=$this->getStart($offset);if($offset!==false){continue;}break;}$this->duration+=$frameHeader->getDuration();$this->frameOffsetTable[$this->frames]=$frameHeader->getOffset();$this->frameTimingTable[$this->frames]=$this->duration;$this->frames++;$offset=$frameHeader->getOffset()+$frameHeader->getLength();unset($frameHeader);}}}private function getStart($offset=0){$offset--;while(true){$offset++;$byte=$this->read(1,$offset);if($byte===false){return false;}if($byte!=chr(255)){continue;}$frameHeader=$this->readFrameHeader($offset);if($frameHeader===false){continue;}$frameHeader=$this->readFrameHeader($frameHeader->getOffset()+$frameHeader->getLength());if($frameHeader===false){continue;}return $offset;}}private function readFrameHeader($offset){$bytes=$this->read(4,$offset);return MpegAudioFrameHeader::tryParse($bytes,$offset);}public function saveFile($path){if($this->resource===null){file_put_contents($path,$this->memory);}else{fflush($this->resource);}return $this;}public function close(){if($this->resource===null){$data=$this->memory;$this->memory="";$this->memoryLength=0;$this->memoryPointer=0;return $data;}if($this->resource!==null&&fclose($this->resource)){$this->resource=null;return true;}return false;}public function getFrameCounts(){if($this->frames<0){$this->analyze();}return $this->frames;}public function getTotalDuration(){if($this->getFrameCounts()){return $this->duration;}return 0.0;}public function getFrameHeader($index){if($index>=0&&$index<$this->getFrameCounts()){return $this->readFrameHeader($this->frameOffsetTable[$index]);}return false;}public function getFrameData($index){$frameHeader=$this->getFrameHeader($index);if($frameHeader!==false){return $this->read($frameHeader->getOffset(),$frameHeader->getLength());}return false;}public function removeFrame($index,$count=1){if($count<0){$index+=$count;$count*=-1;}if($index<0||$index>=$this->getFrameCounts()){return $this;}$count=min($this->getFrameCounts()-$index,$count);if($count==0){return $this;}$firstFrameHeader=$this->getFrameHeader($index);$lastFrameHeader=$this->getFrameHeader($index+($count-1));$this->slice(($lastFrameHeader->getOffset()+$lastFrameHeader->getLength())-$firstFrameHeader->getOffset(),$firstFrameHeader->getOffset());$this->reset();return $this;}public function append(MpegAudio $srcAudio,$index=0,$length=-1){if($index<0||$index>=$srcAudio->getFrameCounts()){return $this;}if($length<0){$length=$srcAudio->getFrameCounts()-$index;}$length=min($srcAudio->getFrameCounts()-$index,$length);$srcFirstFrameHeader=$srcAudio->getFrameHeader($index);$srcLastFrameHeader=$srcAudio->getFrameHeader($index+($length-1));$data=$srcAudio->read(($srcLastFrameHeader->getOffset()+$srcLastFrameHeader->getLength())-$srcFirstFrameHeader->getOffset(),$srcFirstFrameHeader->getOffset());if($data){$endOfStream=0;if($this->getFrameCounts()>0){$frameHeader=$this->getFrameHeader($this->getFrameCounts()-1);if($frameHeader!==false){$endOfStream=$frameHeader->getOffset()+$frameHeader->getLength();}}$this->insert($data,$endOfStream);$this->analyze();}return $this;}public function trim($startTime,$duration=0){if($startTime<0){$startTime=$this->getTotalDuration()+$startTime;}if($duration<=0){$duration=$this->getTotalDuration()-$startTime;}$endTime=min($startTime+$duration,$this->getTotalDuration());$startIndex=0;$endIndex=0;foreach($this->frameTimingTable as $frameIndex=>$frameTiming){if($frameTiming<=$startTime){$startIndex=$frameIndex;}else{if($frameTiming>=$endTime){$endIndex=$frameIndex;break;}}}$this->removeFrame($endIndex,$this->getFrameCounts()-$endIndex);$this->removeFrame(0,$startIndex);return $this;}public function getBeginingTags(){$start=$this->getStart();if($start===false){return false;}return $this->read($start,0);}public function getEndingTags(){$frames=$this->getFrameCounts();if($frames===0){return false;}$frame=$this->getFrameHeader($frames-1);if($frame===false){return false;}return $this->read(0,$frame->getOffset()+$frame->getLength());}public function stripTags(){$frames=$this->getFrameCounts();if($frames>0){$frame=$this->getFrameHeader($frames-1);if($frame!==false){$this->slice(0,$frame->getOffset()+$frame->getLength());}}$start=$this->getStart();if($start!==false&&$start>0){$this->slice($start,0);}$this->reset();return $this;}}
//@formatter:on

/**
 * This class represents a MPEG audio frame's header
 * @author         Soroush Falahati https://falahati.net
 * @copyright      Soroush Falahati (C) 2017
 * @license        LGPL v3 https://www.gnu.org/licenses/lgpl-3.0.en.html
 * @link           https://github.com/falahati/PHP-MP3
 * @formatter:off
*/
class MpegAudioFrameHeader{const Version_10=1;const Version_20=2;const Version_25=3;const Profile_1=1;const Profile_2=2;const Profile_3=3;const Mode_Stereo=0;const Mode_JointStereo=1;const Mode_DualChannel=2;const Mode_SingleChannel=3;const IntensityStereo_Disable=0;const IntensityStereo_Auto=1;const IntensityStereo_Bands4_31=2;const IntensityStereo_Bands8_31=3;const IntensityStereo_Bands12_31=4;const IntensityStereo_Bands16_31=5;private $bitRate=0;private $sampleRate=0;private $version=-1;private $profile=-1;private $duration=0.0;private $offset=0;private $length=0;private $padding=0;private $errorProtection=false;private $privateBit=false;private $copyrighted=false;private $original=false;private $mode=self::Mode_Stereo;private $middleSideStereoJoining=false;private $intensityStereoMode=self::IntensityStereo_Disable;private static $binaryTable=[];private static $bitRateTable=[];private static $sampleRateTable=[];public function getBitRate(){return $this->bitRate;}public function getSampleRate(){return $this->sampleRate;}public function getVersion(){return $this->version;}public function getLayerProfile(){return $this->profile;}public function getDuration(){return $this->duration;}public function getOffset(){return $this->offset;}public function getLength(){return $this->length;}public function getPadding(){return $this->padding;}public function isErrorProtectionEnable(){return $this->errorProtection;}public function isPrivateBitActive(){return $this->privateBit;}public function isCopyrighted(){return $this->copyrighted;}public function isOriginal(){return $this->original;}public function getChannelMode(){return $this->mode;}public function isMiddleSideStereoJoiningEnable(){return $this->middleSideStereoJoining;}public function getIntensityStereoMode(){return $this->intensityStereoMode;}private function __construct(){if(!self::$binaryTable){for($i=0;$i<256;$i++){self::$binaryTable[chr($i)]=sprintf('%08b',$i);}}if(!self::$bitRateTable){self::$bitRateTable=['0000'=>[0,0,0,0,0],'0001'=>[32,32,32,32,8],'0010'=>[64,48,40,48,16],'0011'=>[96,56,48,56,24],'0100'=>[128,64,56,64,32],'0101'=>[160,80,64,80,40],'0110'=>[192,96,80,96,48],'0111'=>[224,112,96,112,56],'1000'=>[256,128,112,128,64],'1001'=>[288,160,128,144,80],'1010'=>[320,192,160,160,96],'1011'=>[352,224,192,176,112],'1100'=>[384,256,224,192,128],'1101'=>[416,320,256,224,144],'1110'=>[448,384,320,256,160],'1111'=>[-1,-1,-1,-1,-1],];}if(!self::$sampleRateTable){self::$sampleRateTable=[self::Version_10=>['00'=>44100,'01'=>48000,'10'=>32000,'11'=>0,],self::Version_20=>['00'=>22050,'01'=>24000,'10'=>16000,'11'=>0,],self::Version_25=>['00'=>11025,'01'=>12000,'10'=>8000,'11'=>0,],];}}public static function tryParse($headerBytes,$offset){$frame=new self();$frame->offset=$offset;$headerBits=[];for($i=0;$i<strlen($headerBytes);$i++){$headerBits[]=self::$binaryTable[$headerBytes[$i]];}if(count($headerBits)<4||$headerBits[0]!=='11111111'||substr($headerBits[1],0,3)!=='111'){return false;}switch(substr($headerBits[1],3,2)){case '01':return false;case '00':$frame->version=self::Version_25;break;case '10':$frame->version=self::Version_20;break;case '11':$frame->version=self::Version_10;break;}switch(substr($headerBits[1],5,2)){case '01':$frame->profile=self::Profile_3;break;case '00':return false;case '10':$frame->profile=self::Profile_2;break;case '11':$frame->profile=self::Profile_1;break;}$frame->errorProtection=!!(substr($headerBits[1],7,1));$frame->bitRate=-1;$bitRateIndex=substr($headerBits[2],0,4);if($frame->version==self::Version_10){switch($frame->profile){case self::Profile_1:$frame->bitRate=self::$bitRateTable[$bitRateIndex][0];break;case self::Profile_2:$frame->bitRate=self::$bitRateTable[$bitRateIndex][1];break;case self::Profile_3:$frame->bitRate=self::$bitRateTable[$bitRateIndex][2];break;}}else{switch($frame->profile){case self::Profile_1:$frame->bitRate=self::$bitRateTable[$bitRateIndex][3];break;case self::Profile_2:case self::Profile_3:$frame->bitRate=self::$bitRateTable[$bitRateIndex][4];break;}}if($frame->bitRate<=0){return false;}$frame->bitRate*=1000;$frame->sampleRate=self::$sampleRateTable[$frame->version][substr($headerBits[2],4,2)];if($frame->sampleRate<=0){return false;}$frame->padding=substr($headerBits[2],6,1)?1:0;$frame->privateBit=!!(substr($headerBits[2],7,1));switch(substr($headerBits[3],0,2)){case '00':$frame->mode=self::Mode_Stereo;break;case '01':$frame->mode=self::Mode_JointStereo;break;case '10':$frame->mode=self::Mode_DualChannel;break;case '11':$frame->mode=self::Mode_SingleChannel;break;}if($frame->profile==self::Profile_1||$frame->profile==self::Profile_2){$frame->middleSideStereoJoining=false;switch(substr($headerBits[3],2,2)){case '00':$frame->intensityStereoMode=self::IntensityStereo_Bands4_31;break;case '01':$frame->intensityStereoMode=self::IntensityStereo_Bands8_31;break;case '10':$frame->intensityStereoMode=self::IntensityStereo_Bands12_31;break;case '11':$frame->intensityStereoMode=self::IntensityStereo_Bands16_31;break;}}else{if($frame->profile==self::Profile_3){$frame->intensityStereoMode=substr($headerBits[3],2,1)?self::IntensityStereo_Auto:self::IntensityStereo_Disable;$frame->middleSideStereoJoining=!!(substr($headerBits[3],3,1));}}$frame->copyrighted=!!(substr($headerBits[3],4,4));$frame->original=!!(substr($headerBits[3],5,1));if($frame->profile==self::Profile_1){$frame->length=(((12*$frame->bitRate)/$frame->sampleRate)+$frame->padding)*4;}else{if($frame->profile==self::Profile_2||$frame->profile==self::Profile_3){$frame->length=((144*$frame->bitRate)/$frame->sampleRate)+$frame->padding;}}$frame->length=floor($frame->length);if($frame->length<=0){return false;}$frame->duration=$frame->length*8/$frame->bitRate;return $frame;}}
//@formatter:on
?>